
User Stack and Kernel Stack in Multiprogramming
In a multiprogramming environment, the operating system (OS) must manage multiple processes efficiently, ensuring isolation, resource sharing, and proper execution. Two key concepts in this regard are the user stack and the kernel stack:

User Stack:
Belongs to the user space.
Stores function arguments, local variables, and return addresses for functions invoked during user-mode execution.
Each process has its own user stack for user-mode operations, which resides in its private virtual address space.
Kernel Stack:
Belongs to the kernel space.
Stores the state of the process when it executes kernel code (e.g., during system calls, interrupts, or exceptions).
Each process has its own kernel stack (separate from the user stack) to handle operations in kernel mode.
Typically, the kernel stack is smaller than the user stack and is allocated in kernel memory, often as a fixed-size structure.
Switching Between User and Kernel Stacks:
When a process transitions between user mode and kernel mode (e.g., during a system call or interrupt), the CPU switches from the user stack to the kernel stack:

The CPU saves the current state (program counter, registers, etc.) on the kernel stack.
Execution begins at the corresponding kernel entry point.
When the kernel work is complete, the CPU restores the saved state from the kernel stack and returns to user mode.
Context Switching in x86 (32-bit) Multiprogramming
Context Switching:
Context switching is the process of saving and restoring the CPU state so that execution can move from one process (or thread) to another. This is a critical component of multiprogramming and is managed by the operating system.

Components of Context in x86 (32-bit):
Registers:

General-purpose registers: EAX, EBX, ECX, EDX, ESI, EDI, EBP, ESP.
Segment registers: CS, DS, ES, FS, GS, SS.
Instruction Pointer (EIP).
Flags Register (EFLAGS).
Memory State:

The user and kernel stack pointers (ESP and SS).
Virtual memory mappings (page tables).
Process Control Block (PCB):

Stores the state of a process, including its context, priority, and other metadata.
Software Context Switching:
Hereâ€™s how software context switching is implemented in x86 (32-bit):

Save Current Process State:

The CPU state (registers, EIP, EFLAGS, stack pointers) is saved in the current process's PCB.
For kernel transitions, this involves storing the state in the kernel stack of the current process.
Select the Next Process:

The OS scheduler chooses the next process to run, based on the scheduling policy (e.g., round-robin, priority-based).
Load New Process State:

The saved context of the next process (from its PCB) is loaded into the CPU.
This includes restoring the registers, stack pointers, and program counter.
Switch Memory Context:

Update the page tables (or segment descriptors) to switch to the new process's memory space.
Resume Execution:

Execution resumes at the instruction pointed to by the restored EIP.
Interrupt Handling in x86:
Interrupts trigger an automatic context switch to the kernel stack. Here's how it works:

The CPU pushes the current EFLAGS, CS, and EIP onto the kernel stack.
It switches to the kernel stack (defined in the Task State Segment, TSS) and executes the interrupt handler.
On return from the interrupt, the CPU restores the saved state from the kernel stack


INTERRUPTS DOING CONTEXT SWITCHING

interrupt1:
	mov ax, 0x10
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax
	
	mov [0xb0000],esp
	call isrFn1
	call changePrivLevel2;

interrupt2:
	mov ax, 0x10
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax



	;mov [0xb0100],esp
	mov edi,esp
	call isrFn2
	mov esp,[0xb0000]
	mov ax, 0x23
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax
	
	iret
	
	
interrupt3:
	mov ax, 0x10
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax
	
	mov [0xb0000],esp
	call isrFn3
	
	mov esp,[0xb0100]

	mov ax, 0x23
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax
	iret



Key Features in x86 for Context Switching:
Task State Segment (TSS): The TSS is a data structure used to store task-specific information, including the kernel stack pointer for each process.


FUNCTIONS FOR CHANGING THE KERNEL STACK

void isrFn1(){
	tss1.esp0 = 0xd700;
	return;
}
void isrFn2(){
	tss1.esp0 = 0xd000;
	return;
}
void isrFn3(){
	tss1.esp0 = 0xd700;
	return;
}



Privilege Levels: x86 uses four privilege levels (ring 0 to ring 3). Context switching often involves transitions between ring 3 (user mode) and ring 0 (kernel mode).

Paging: The MMU (Memory Management Unit) supports virtual memory, allowing processes to have isolated memory spaces. The page directory base register (CR3) is switched during context switching to load a new process's page tables


USER PROGRAMS

void userProg11(){
	int a=0;
	while(a<10){
	char *b="0first\n";
	b[0]='0'+a;
	printlib(b);
	//printlib("rium");
	conSwitch(1);
	a=a+1;
	}
	return;
	

}
void userProg22(){
	int a=0;
	while(a<10){
	char *b="0scnd\n";
	b[0]='0'+a;
	printlib(b);
	//printlib("rium");
	conSwitch(2);
	a=a+1;
	}
	return;
	

}

SOFTWARE CONTEXT SWITCH FUNCTION

void conSwitch(int a){
	    if(a==1 && p2==0){
	    	p2=1;
	    	asm volatile ("int $0x01");
	    }
	    else if(a==1 && p2==1){
	    
	    	asm volatile ("int $0x03");
	    }
	    else if(a==2){
	    
	    	asm volatile ("int $0x02");
	    }
	 
}






INITIALIZING THE TWO USER PROGRAMS

changePrivLevel1:
 ; Prepare stack for IRET (returning to ring 3)
    push 0x23                 ; Ring 3 data segment selector for SS
    push 0xC000            ; Stack pointer for ring 3 FOR prog1
    pushf                      ; Push EFLAGS
    pop eax
    or eax, 0x200               ; Enable interrupts in EFLAGS
    push eax
    push 0x1B                  ; Ring 3 code segment selector for CS (index << 3) | RPL 3
    push userProg1              ; Entry point in ring 3

    ; Use IRET to switch to ring 3
    iret

changePrivLevel2:
 ; Prepare stack for IRET (returning to ring 3)
    push 0x23                 ; Ring 3 data segment selector for SS
    push 0xC700            ; Stack pointer for ring 3 FOR prog2
    pushf                      ; Push EFLAGS
    pop eax
    or eax, 0x200               ; Enable interrupts in EFLAGS
    push eax
    push 0x1B                  ; Ring 3 code segment selector for CS (index << 3) | RPL 3
    push userProg2              ; Entry point in ring 3

    ; Use IRET to switch to ring 3
    iret
    
    	
userProg1:
	mov ax, 0x23
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax
	call userProg11
	jmp $	
	
userProg2:
	mov ax, 0x23
	mov ds, ax
	mov es, ax
	mov fs, ax
	mov gs, ax
	call userProg22
	jmp $	
	
	
	
	
	
	
	

